export SSL_CERT := "certs/airlock.crt"
export SSL_KEY := "certs/airlock.key"
export SELFSIGNED_CERT := "certs/testing.crt"
export SELFSIGNED_KEY := "certs/testing.key"
export SYSTEM_CERTS := "/usr/local/share/ca-certificates/airlock"

[private]
default:
  @just --list

# pull latest version and deploy
deploy: && restart
    echo "Pulling image"
    docker-compose --ansi never pull --quiet airlock


# restart airlock
restart *args:
    docker-compose --ansi never up --no-build {{ args }} --detach airlock

# show airlock logs
logs *args:
    sudo journalctl -t airlock {{ args }}

# update to the certificate for airlock from backends.opensafely.org
update-certs:
    #!/bin/bash
    set -euo pipefail
    # ensure env is loaded 
    . ~opensafely/config/load-env

    echo "Checking for certificate updates"
    openssl s_client -showcerts -connect backends.opensafely.org:443 </dev/null 2>/dev/null| sed -n '/^-----BEGIN CERT/,/^-----END CERT/p' > certs/fullchain.latest.pem
    update=false

    # if we have no fullchain cert yet
    if ! test -f certs/fullchain.pem; then
        echo "No fullchain.pem, updating"
        update=true
    # if cert has changed
    elif ! diff -q certs/fullchain.pem certs/fullchain.latest.pem; then
        echo "fullchain.pem is out of date, updating"
        update=true
    fi

    if test "$update" = "true"; then
        cp certs/fullchain.latest.pem certs/fullchain.pem

        # only actually update the certs if we're not inside tests
        if test "${TEST:-}" = "true"; then
            echo "Skipping cert update as in TEST env"
        else
            ln -sf fullchain.pem $SSL_CERT
            {{ just_executable() }} restart --force-recreate
        fi
    fi
    
# autodeployment target. Update certs and image
autodeploy: update-certs deploy


[private]
create-test-certificates:
    #!/bin/bash 
    set -euo pipefail

    if test -f $SSL_KEY -o -f $SSL_CERT; then
        echo "$SSL_KEY and/or $SSL_CERT already exist"
        exit;
    fi

    . ~opensafely/config/load-env

    HOSTNAME="$(echo "$RELEASE_HOST" | cut -d'/' -f3 | cut -d':' -f1)"
    mkdir -p "$(dirname $SSL_CERT)"

    # generate a self signed certificate
    openssl req -x509 -newkey ed25519 -keyout $SELFSIGNED_KEY -out $SELFSIGNED_CERT \
        -sha256 -days 365 -nodes \
        -subj "/C=GB/O=OpenSAFELY/CN=$HOSTNAME/emailAddress=test@example.com" \
        -addext "subjectAltName = DNS:$HOSTNAME"

    # Relative link to the selfsigned cert
    # Needs to be relative, as the whole certs/ dir is mounted as a volume
    ln -s $(basename $SELFSIGNED_CERT) $SSL_CERT
    ln -s $(basename $SELFSIGNED_KEY) $SSL_KEY

    # ensure self signed is trusted by this machine
    ln -sf $PWD/$SELFSIGNED_CERT /usr/local/share/ca-certificates/opensafely/
    update-ca-certificates


