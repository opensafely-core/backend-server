jobrunner_cli := 'docker compose run --rm jobrunner python3 -m jobrunner.cli'

[private]
default:
  @just --list


# show the status of the jobrunner service
status:
    docker compose ps jobrunner

# stop the jobrunner service
stop:
    docker compose stop

# restart the jobrunner service
restart *args:
    docker compose up --no-build {{ args }} --detach jobrunner

alias start:=restart

restart-if-running:
    #!/usr/bin/env bash
    set -euo pipefail

    # The quadruple opening braces are not a typo: they are how we have to escape the braces
    # inside a Justfile (the closing braces do not need escaping)
    JOBRUNNER_STATE=`docker compose ps --format "{{{{.State}}" jobrunner`
    if [ "$JOBRUNNER_STATE" = "running" ]; then
        docker compose up --no-build --detach jobrunner
    fi

# Update jobrunner and restart
deploy: && restart-if-running
    docker compose pull --quiet jobrunner

# Run a jobrunner cli command
cli command *ARGS:
    {{ jobrunner_cli }}.{{ command }} {{ ARGS }}

# run jobrunner db migrations
migrate:
    {{ just_executable() }} cli controller.migrate

# ensure backend is paused and cancel all running jobs
# Use --status to check status of jobs before rebooting
prepare-for-reboot backend *args:
    {{ just_executable() }} cli controller.prepare_for_reboot --backend {{ backend }} {{ args }}

# stop accepting new jobs
pause backend:
    {{ just_executable() }} cli controller.flags set paused=true --backend {{ backend }}

# start accepting new jobs
unpause backend:
    {{ just_executable() }} cli controller.flags set paused= --backend {{ backend }}

# show jobrunner logs (using `docker compose logs`)
logs *args:
    sudo journalctl -t jobrunner {{ args }}

# show jobrunner logs for a specific job_id
logs-id job_id:
    sudo journalctl -t jobrunner -g {{ job_id }}

# list all currently running jobs
jobs-ls:
    lsjobs

# show docker stats for all currently running jobs
jobs-stats:
    docker stats --no-stream

# manually enable database maintenance mode. Kill and re-queue all db jobs.
db-maintenance-on backend:
    {{ just_executable() }} cli controller.flags set mode=db-maintenance manual-db-maintenance=on --backend {{ backend }}

# manually disable database maintenance mode
db-maintenance-off backend:
    {{ just_executable() }} cli controller.flags set mode= manual-db-maintenance= --backend {{ backend }}

# update docker image
update-docker-image image:
    #!/bin/bash
    set -euo pipefail
    # pull from proxy
    docker pull docker-proxy.opensafely.org/opensafely-core/{{ image }}
    # tag as if we'd pulled direct from ghcr.io
    docker tag docker-proxy.opensafely.org/opensafely-core/{{ image }} ghcr.io/opensafely-core/{{ image }}
    action_name="$(echo {{ image }} | awk -F: '{print $1}')"
    # delete dangling version of this image
    docker image prune --force --filter "label=org.opensafely.action=$action_name"

# add a job run run
add-job backend *args:
    {{ just_executable() }} cli controller.add_job {{ args }} --backend {{ backend }}
